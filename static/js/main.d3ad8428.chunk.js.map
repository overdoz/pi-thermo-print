{"version":3,"sources":["white-construction-paper-texture.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","onChangeHandler","event","setState","selectedFile","target","files","onClickHandler","state","text","console","log","axios","method","url","data","Text","headers","params","type","then","res","statusText","FormData","append","post","className","src","paper","alt","action","name","wrap","cols","value","this","onChange","e","placeholder","encType","uwfileinput","accept","capture","onClick","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d3ad8428.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/white-construction-paper-texture.41991707.jpg\";","import React, { Component } from 'react'\nimport './App.css'\nimport axios from 'axios';\nimport paper from './white-construction-paper-texture.jpg';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedFile: null,\n            text: \"\"\n        }\n\n    }\n\n    onChangeHandler=event=>{\n        this.setState({\n            selectedFile: event.target.files[0]\n\n        });\n    };\n\n    onClickHandler = () => {\n        if (this.state.text !== \"\" && this.state.selectedFile === null) {\n            console.log(\"sent text\");\n            axios({\n                method: 'post',\n                url: '/',\n                data: {\n                    Text: this.state.text\n                },\n                headers: {\n                    'Content-Type': \"application/json\"\n                },\n                params: {\n                    type: 'text'\n                },\n\n            }).then(res => { // then print response status\n                console.log(res.statusText)\n            });\n            this.setState({text: \"\"});\n        } else if (this.state.text === \"\" && this.state.selectedFile !== null) {\n            console.log(\"sent pic\");\n            const data = new FormData();\n\n            data.append('file', this.state.selectedFile);\n            axios.post(\"/\", data, {\n                headers: {\n                    'Content-Type': \"multipart/form-data\"\n                },\n                params: {\n                    type: 'files'\n                }\n            }).then(res => { // then print response status\n                console.log(res.statusText)\n            });\n            this.setState({selectedFile: null});\n        } else {\n            this.setState({text: \"\"});\n            this.setState({selectedFile: null});\n            console.log(\"Couldn't send shit...\")\n        }\n    };\n\n    render() {\n        const w = \"             W \\n            WWW\\n            WWW\\n           WWWWW\\n     W     WWWWW     W\\n     WWW   WWWWW   WWW\\n      WWW  WWWWW  WWW\\n       WWW  WWW  WWW\\n        WWW WWW WWW\\n          WWWWWWW\\n       WWWW  |  WWWW\\n             |\\n             |\\n\"\n\n        return (\n            <div className=\"App container\">\n                <section className={\"child text-page\"}>\n                    <img src={paper} alt={\"papier\"}/>\n                    <form method=\"POST\" action=\"/\">\n                        <textarea name ={\"text\"} wrap={\"hard\"} cols={\"29\"} className={\"textField\"} value={this.state.text} onChange={(e) => this.setState({text: e.target.value})} placeholder={\"Leave us a note... \\n\\n\" + w + \"\\n ┏(-_-)┛┗(-_-﻿ )┓┗(-_-)┛\\n\\n  be creative :) \\n    or die tryin \\n\\n \"} />\n                    </form>\n                </section>\n                <section className={\"child pic-page\"}>\n                    <img src={paper} alt={\"papier\"}/>\n                    <h2>Print your uploaded photo</h2>\n                    <form method=\"POST\" action=\"\" encType='multipart/form-data'>\n                        <input className={\"upload\"} uwfileinput type={\"file\"} accept={\".jpeg,.jpg,.png,.gif\"} capture={\"camera\"} name={\"file\"} onChange={this.onChangeHandler} />\n                    </form>\n                </section>\n                <input className={\"inputButton\"} type=\"submit\" value=\"print\" onClick={this.onClickHandler} />\n            </div>\n        )\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. AAAA is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}